name: build
run-name: build ${{github.repository}} by ${{github.actor}}
on: [push, pull_request]

jobs: 
  # The “build” workflow 
  build-linux:
    env:
      PLATFORMS: 'linux/amd64,linux/arm64'

    runs-on: ubuntu-latest

    steps:
    - name: Perform Checkout
      uses: actions/checkout@v4

    - name: Get Golang Version from go.mod file
      run: sed -En 's/^go (.*)$/GO_VERSION=\1/p' go.mod >> $GITHUB_ENV

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3      

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push Multiarch Container Image [ ${{ env.PLATFORMS }} ]
      run: |
        docker buildx build --push --build-arg='GO_VERSION=${{env.GO_VERSION}}' --platform=${{ env.PLATFORMS }} -t ${{ secrets.DOCKERHUB_USERNAME }}/helloweb:latest -f build/Dockerfile .
  
  build-linux-amd64:
    runs-on: ubuntu-latest
    env: 
      CGO_ENABLED: 0
      GOOS: linux
      GOARCH: amd64

    steps:
    - name: Perform Checkout
      uses: actions/checkout@v4

    - name: Setup Go Environment
      uses: actions/setup-go@v4
      with:
        go-version-file: go.mod

    - name: Compile Go program
      run: |
        go build -o server cmd/server.go

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build docker Image
      run: |
        docker build -t ${{ secrets.DOCKERHUB_USERNAME}}/helloweb:linux-amd64 -f build/Dockerfile.linux .

    - name: Push docker Image
      run: |
        docker push ${{ secrets.DOCKERHUB_USERNAME}}/helloweb:linux-amd64

  build-windows-ltsc2019:
    runs-on: windows-2019
    env: 
      DOCKER_CLI_EXPERIMENTAL: ENABLED
      CGO_ENABLED: 0
      GOOS: windows

    steps:
    - name: Perform Checkout
      uses: actions/checkout@v4

    - name: Setup Go Environment
      uses: actions/setup-go@v4
      with:
        go-version-file: go.mod

    - name: Compile Go program
      run: |
        go build -o server.exe cmd/server.go

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build docker Image
      run: |
        docker build --build-arg "WINVER=ltsc2019" -t ${{ secrets.DOCKERHUB_USERNAME}}/helloweb:ltsc2019 -f build/Dockerfile.windows .

    - name: Push docker Image
      run: |
        docker push ${{ secrets.DOCKERHUB_USERNAME}}/helloweb:ltsc2019

  build-windows-ltsc2022:
    runs-on: windows-2022
    env: 
      DOCKER_CLI_EXPERIMENTAL: ENABLED
      CGO_ENABLED: 0
      GOOS: windows

    steps:
    - name: Perform Checkout
      uses: actions/checkout@v4

    - name: Setup Go Environment
      uses: actions/setup-go@v4
      with:
        go-version-file: go.mod

    - name: Compile Go program
      run: |
        go build -o server.exe cmd/server.go

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build docker Image
      run: |
        docker build --build-arg "WINVER=ltsc2022" -t ${{ secrets.DOCKERHUB_USERNAME}}/helloweb:ltsc2022 -f build/Dockerfile.windows .

    - name: Push docker Image
      run: |
        docker push ${{ secrets.DOCKERHUB_USERNAME}}/helloweb:ltsc2022

  build-multiarch-manifest:
    runs-on: ubuntu-latest
    env:
      DOCKER_CLI_EXPERIMENTAL: ENABLED

    steps:
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build Manifest
      run: |
        docker manifest create ${{ secrets.DOCKERHUB_USERNAME}}/helloweb:multiarch \ 
        --amend ${{ secrets.DOCKERHUB_USERNAME}}/helloweb:linux-amd64 \
        --amend ${{ secrets.DOCKERHUB_USERNAME}}/helloweb:ltsc2019 \
        --amend ${{ secrets.DOCKERHUB_USERNAME}}/helloweb:ltsc2022

    - name: Push Manifest
      run: |
        docker manifest --purge push ${{ secrets.DOCKERHUB_USERNAME}}/helloweb:multiarch

